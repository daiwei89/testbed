// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: strads.proto

#ifndef PROTOBUF_strads_2eproto__INCLUDED
#define PROTOBUF_strads_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace strads_sysmsg {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_strads_2eproto();
void protobuf_AssignDesc_strads_2eproto();
void protobuf_ShutdownFile_strads_2eproto();

class dshardctxmsg_;
class singlebucket;
class sysmsg;

enum matrix_type {
  cm_map = 0,
  cm_vec = 1,
  rm_map = 2,
  rm_vec = 3,
  dense2d = 4
};
bool matrix_type_IsValid(int value);
const matrix_type matrix_type_MIN = cm_map;
const matrix_type matrix_type_MAX = dense2d;
const int matrix_type_ARRAYSIZE = matrix_type_MAX + 1;

const ::google::protobuf::EnumDescriptor* matrix_type_descriptor();
inline const ::std::string& matrix_type_Name(matrix_type value) {
  return ::google::protobuf::internal::NameOfEnum(
    matrix_type_descriptor(), value);
}
inline bool matrix_type_Parse(
    const ::std::string& name, matrix_type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<matrix_type>(
    matrix_type_descriptor(), name, value);
}
// ===================================================================

class dshardctxmsg_ : public ::google::protobuf::Message {
 public:
  dshardctxmsg_();
  virtual ~dshardctxmsg_();

  dshardctxmsg_(const dshardctxmsg_& from);

  inline dshardctxmsg_& operator=(const dshardctxmsg_& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const dshardctxmsg_& default_instance();

  void Swap(dshardctxmsg_* other);

  // implements Message ----------------------------------------------

  dshardctxmsg_* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const dshardctxmsg_& from);
  void MergeFrom(const dshardctxmsg_& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string fn = 1;
  inline bool has_fn() const;
  inline void clear_fn();
  static const int kFnFieldNumber = 1;
  inline const ::std::string& fn() const;
  inline void set_fn(const ::std::string& value);
  inline void set_fn(const char* value);
  inline void set_fn(const char* value, size_t size);
  inline ::std::string* mutable_fn();
  inline ::std::string* release_fn();
  inline void set_allocated_fn(::std::string* fn);

  // required string alias = 2;
  inline bool has_alias() const;
  inline void clear_alias();
  static const int kAliasFieldNumber = 2;
  inline const ::std::string& alias() const;
  inline void set_alias(const ::std::string& value);
  inline void set_alias(const char* value);
  inline void set_alias(const char* value, size_t size);
  inline ::std::string* mutable_alias();
  inline ::std::string* release_alias();
  inline void set_allocated_alias(::std::string* alias);

  // required .strads_sysmsg.matrix_type mtype = 3;
  inline bool has_mtype() const;
  inline void clear_mtype();
  static const int kMtypeFieldNumber = 3;
  inline ::strads_sysmsg::matrix_type mtype() const;
  inline void set_mtype(::strads_sysmsg::matrix_type value);

  // required uint64 maxrow = 4;
  inline bool has_maxrow() const;
  inline void clear_maxrow();
  static const int kMaxrowFieldNumber = 4;
  inline ::google::protobuf::uint64 maxrow() const;
  inline void set_maxrow(::google::protobuf::uint64 value);

  // required uint64 maxcol = 5;
  inline bool has_maxcol() const;
  inline void clear_maxcol();
  static const int kMaxcolFieldNumber = 5;
  inline ::google::protobuf::uint64 maxcol() const;
  inline void set_maxcol(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:strads_sysmsg.dshardctxmsg_)
 private:
  inline void set_has_fn();
  inline void clear_has_fn();
  inline void set_has_alias();
  inline void clear_has_alias();
  inline void set_has_mtype();
  inline void clear_has_mtype();
  inline void set_has_maxrow();
  inline void clear_has_maxrow();
  inline void set_has_maxcol();
  inline void clear_has_maxcol();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* fn_;
  ::std::string* alias_;
  ::google::protobuf::uint64 maxrow_;
  ::google::protobuf::uint64 maxcol_;
  int mtype_;
  friend void  protobuf_AddDesc_strads_2eproto();
  friend void protobuf_AssignDesc_strads_2eproto();
  friend void protobuf_ShutdownFile_strads_2eproto();

  void InitAsDefaultInstance();
  static dshardctxmsg_* default_instance_;
};
// -------------------------------------------------------------------

class singlebucket : public ::google::protobuf::Message {
 public:
  singlebucket();
  virtual ~singlebucket();

  singlebucket(const singlebucket& from);

  inline singlebucket& operator=(const singlebucket& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const singlebucket& default_instance();

  void Swap(singlebucket* other);

  // implements Message ----------------------------------------------

  singlebucket* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const singlebucket& from);
  void MergeFrom(const singlebucket& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 wid = 1 [packed = true];
  inline int wid_size() const;
  inline void clear_wid();
  static const int kWidFieldNumber = 1;
  inline ::google::protobuf::int32 wid(int index) const;
  inline void set_wid(int index, ::google::protobuf::int32 value);
  inline void add_wid(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      wid() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_wid();

  // @@protoc_insertion_point(class_scope:strads_sysmsg.singlebucket)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > wid_;
  mutable int _wid_cached_byte_size_;
  friend void  protobuf_AddDesc_strads_2eproto();
  friend void protobuf_AssignDesc_strads_2eproto();
  friend void protobuf_ShutdownFile_strads_2eproto();

  void InitAsDefaultInstance();
  static singlebucket* default_instance_;
};
// -------------------------------------------------------------------

class sysmsg : public ::google::protobuf::Message {
 public:
  sysmsg();
  virtual ~sysmsg();

  sysmsg(const sysmsg& from);

  inline sysmsg& operator=(const sysmsg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const sysmsg& default_instance();

  void Swap(sysmsg* other);

  // implements Message ----------------------------------------------

  sysmsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const sysmsg& from);
  void MergeFrom(const sysmsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string filename = 1;
  inline bool has_filename() const;
  inline void clear_filename();
  static const int kFilenameFieldNumber = 1;
  inline const ::std::string& filename() const;
  inline void set_filename(const ::std::string& value);
  inline void set_filename(const char* value);
  inline void set_filename(const char* value, size_t size);
  inline ::std::string* mutable_filename();
  inline ::std::string* release_filename();
  inline void set_allocated_filename(::std::string* filename);

  // optional string alias = 2;
  inline bool has_alias() const;
  inline void clear_alias();
  static const int kAliasFieldNumber = 2;
  inline const ::std::string& alias() const;
  inline void set_alias(const ::std::string& value);
  inline void set_alias(const char* value);
  inline void set_alias(const char* value, size_t size);
  inline ::std::string* mutable_alias();
  inline ::std::string* release_alias();
  inline void set_allocated_alias(::std::string* alias);

  // optional int32 max_row = 3;
  inline bool has_max_row() const;
  inline void clear_max_row();
  static const int kMaxRowFieldNumber = 3;
  inline ::google::protobuf::int32 max_row() const;
  inline void set_max_row(::google::protobuf::int32 value);

  // optional int32 max_col = 4;
  inline bool has_max_col() const;
  inline void clear_max_col();
  static const int kMaxColFieldNumber = 4;
  inline ::google::protobuf::int32 max_col() const;
  inline void set_max_col(::google::protobuf::int32 value);

  // repeated .strads_sysmsg.singlebucket rbuckets = 5;
  inline int rbuckets_size() const;
  inline void clear_rbuckets();
  static const int kRbucketsFieldNumber = 5;
  inline const ::strads_sysmsg::singlebucket& rbuckets(int index) const;
  inline ::strads_sysmsg::singlebucket* mutable_rbuckets(int index);
  inline ::strads_sysmsg::singlebucket* add_rbuckets();
  inline const ::google::protobuf::RepeatedPtrField< ::strads_sysmsg::singlebucket >&
      rbuckets() const;
  inline ::google::protobuf::RepeatedPtrField< ::strads_sysmsg::singlebucket >*
      mutable_rbuckets();

  // repeated .strads_sysmsg.singlebucket cbuckets = 6;
  inline int cbuckets_size() const;
  inline void clear_cbuckets();
  static const int kCbucketsFieldNumber = 6;
  inline const ::strads_sysmsg::singlebucket& cbuckets(int index) const;
  inline ::strads_sysmsg::singlebucket* mutable_cbuckets(int index);
  inline ::strads_sysmsg::singlebucket* add_cbuckets();
  inline const ::google::protobuf::RepeatedPtrField< ::strads_sysmsg::singlebucket >&
      cbuckets() const;
  inline ::google::protobuf::RepeatedPtrField< ::strads_sysmsg::singlebucket >*
      mutable_cbuckets();

  // optional .strads_sysmsg.dshardctxmsg_ dshardctxmsg = 7;
  inline bool has_dshardctxmsg() const;
  inline void clear_dshardctxmsg();
  static const int kDshardctxmsgFieldNumber = 7;
  inline const ::strads_sysmsg::dshardctxmsg_& dshardctxmsg() const;
  inline ::strads_sysmsg::dshardctxmsg_* mutable_dshardctxmsg();
  inline ::strads_sysmsg::dshardctxmsg_* release_dshardctxmsg();
  inline void set_allocated_dshardctxmsg(::strads_sysmsg::dshardctxmsg_* dshardctxmsg);

  // @@protoc_insertion_point(class_scope:strads_sysmsg.sysmsg)
 private:
  inline void set_has_filename();
  inline void clear_has_filename();
  inline void set_has_alias();
  inline void clear_has_alias();
  inline void set_has_max_row();
  inline void clear_has_max_row();
  inline void set_has_max_col();
  inline void clear_has_max_col();
  inline void set_has_dshardctxmsg();
  inline void clear_has_dshardctxmsg();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* filename_;
  ::std::string* alias_;
  ::google::protobuf::int32 max_row_;
  ::google::protobuf::int32 max_col_;
  ::google::protobuf::RepeatedPtrField< ::strads_sysmsg::singlebucket > rbuckets_;
  ::google::protobuf::RepeatedPtrField< ::strads_sysmsg::singlebucket > cbuckets_;
  ::strads_sysmsg::dshardctxmsg_* dshardctxmsg_;
  friend void  protobuf_AddDesc_strads_2eproto();
  friend void protobuf_AssignDesc_strads_2eproto();
  friend void protobuf_ShutdownFile_strads_2eproto();

  void InitAsDefaultInstance();
  static sysmsg* default_instance_;
};
// ===================================================================


// ===================================================================

// dshardctxmsg_

// required string fn = 1;
inline bool dshardctxmsg_::has_fn() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void dshardctxmsg_::set_has_fn() {
  _has_bits_[0] |= 0x00000001u;
}
inline void dshardctxmsg_::clear_has_fn() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void dshardctxmsg_::clear_fn() {
  if (fn_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fn_->clear();
  }
  clear_has_fn();
}
inline const ::std::string& dshardctxmsg_::fn() const {
  // @@protoc_insertion_point(field_get:strads_sysmsg.dshardctxmsg_.fn)
  return *fn_;
}
inline void dshardctxmsg_::set_fn(const ::std::string& value) {
  set_has_fn();
  if (fn_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fn_ = new ::std::string;
  }
  fn_->assign(value);
  // @@protoc_insertion_point(field_set:strads_sysmsg.dshardctxmsg_.fn)
}
inline void dshardctxmsg_::set_fn(const char* value) {
  set_has_fn();
  if (fn_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fn_ = new ::std::string;
  }
  fn_->assign(value);
  // @@protoc_insertion_point(field_set_char:strads_sysmsg.dshardctxmsg_.fn)
}
inline void dshardctxmsg_::set_fn(const char* value, size_t size) {
  set_has_fn();
  if (fn_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fn_ = new ::std::string;
  }
  fn_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:strads_sysmsg.dshardctxmsg_.fn)
}
inline ::std::string* dshardctxmsg_::mutable_fn() {
  set_has_fn();
  if (fn_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fn_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:strads_sysmsg.dshardctxmsg_.fn)
  return fn_;
}
inline ::std::string* dshardctxmsg_::release_fn() {
  clear_has_fn();
  if (fn_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = fn_;
    fn_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void dshardctxmsg_::set_allocated_fn(::std::string* fn) {
  if (fn_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete fn_;
  }
  if (fn) {
    set_has_fn();
    fn_ = fn;
  } else {
    clear_has_fn();
    fn_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:strads_sysmsg.dshardctxmsg_.fn)
}

// required string alias = 2;
inline bool dshardctxmsg_::has_alias() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void dshardctxmsg_::set_has_alias() {
  _has_bits_[0] |= 0x00000002u;
}
inline void dshardctxmsg_::clear_has_alias() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void dshardctxmsg_::clear_alias() {
  if (alias_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    alias_->clear();
  }
  clear_has_alias();
}
inline const ::std::string& dshardctxmsg_::alias() const {
  // @@protoc_insertion_point(field_get:strads_sysmsg.dshardctxmsg_.alias)
  return *alias_;
}
inline void dshardctxmsg_::set_alias(const ::std::string& value) {
  set_has_alias();
  if (alias_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    alias_ = new ::std::string;
  }
  alias_->assign(value);
  // @@protoc_insertion_point(field_set:strads_sysmsg.dshardctxmsg_.alias)
}
inline void dshardctxmsg_::set_alias(const char* value) {
  set_has_alias();
  if (alias_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    alias_ = new ::std::string;
  }
  alias_->assign(value);
  // @@protoc_insertion_point(field_set_char:strads_sysmsg.dshardctxmsg_.alias)
}
inline void dshardctxmsg_::set_alias(const char* value, size_t size) {
  set_has_alias();
  if (alias_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    alias_ = new ::std::string;
  }
  alias_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:strads_sysmsg.dshardctxmsg_.alias)
}
inline ::std::string* dshardctxmsg_::mutable_alias() {
  set_has_alias();
  if (alias_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    alias_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:strads_sysmsg.dshardctxmsg_.alias)
  return alias_;
}
inline ::std::string* dshardctxmsg_::release_alias() {
  clear_has_alias();
  if (alias_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = alias_;
    alias_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void dshardctxmsg_::set_allocated_alias(::std::string* alias) {
  if (alias_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete alias_;
  }
  if (alias) {
    set_has_alias();
    alias_ = alias;
  } else {
    clear_has_alias();
    alias_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:strads_sysmsg.dshardctxmsg_.alias)
}

// required .strads_sysmsg.matrix_type mtype = 3;
inline bool dshardctxmsg_::has_mtype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void dshardctxmsg_::set_has_mtype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void dshardctxmsg_::clear_has_mtype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void dshardctxmsg_::clear_mtype() {
  mtype_ = 0;
  clear_has_mtype();
}
inline ::strads_sysmsg::matrix_type dshardctxmsg_::mtype() const {
  // @@protoc_insertion_point(field_get:strads_sysmsg.dshardctxmsg_.mtype)
  return static_cast< ::strads_sysmsg::matrix_type >(mtype_);
}
inline void dshardctxmsg_::set_mtype(::strads_sysmsg::matrix_type value) {
  assert(::strads_sysmsg::matrix_type_IsValid(value));
  set_has_mtype();
  mtype_ = value;
  // @@protoc_insertion_point(field_set:strads_sysmsg.dshardctxmsg_.mtype)
}

// required uint64 maxrow = 4;
inline bool dshardctxmsg_::has_maxrow() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void dshardctxmsg_::set_has_maxrow() {
  _has_bits_[0] |= 0x00000008u;
}
inline void dshardctxmsg_::clear_has_maxrow() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void dshardctxmsg_::clear_maxrow() {
  maxrow_ = GOOGLE_ULONGLONG(0);
  clear_has_maxrow();
}
inline ::google::protobuf::uint64 dshardctxmsg_::maxrow() const {
  // @@protoc_insertion_point(field_get:strads_sysmsg.dshardctxmsg_.maxrow)
  return maxrow_;
}
inline void dshardctxmsg_::set_maxrow(::google::protobuf::uint64 value) {
  set_has_maxrow();
  maxrow_ = value;
  // @@protoc_insertion_point(field_set:strads_sysmsg.dshardctxmsg_.maxrow)
}

// required uint64 maxcol = 5;
inline bool dshardctxmsg_::has_maxcol() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void dshardctxmsg_::set_has_maxcol() {
  _has_bits_[0] |= 0x00000010u;
}
inline void dshardctxmsg_::clear_has_maxcol() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void dshardctxmsg_::clear_maxcol() {
  maxcol_ = GOOGLE_ULONGLONG(0);
  clear_has_maxcol();
}
inline ::google::protobuf::uint64 dshardctxmsg_::maxcol() const {
  // @@protoc_insertion_point(field_get:strads_sysmsg.dshardctxmsg_.maxcol)
  return maxcol_;
}
inline void dshardctxmsg_::set_maxcol(::google::protobuf::uint64 value) {
  set_has_maxcol();
  maxcol_ = value;
  // @@protoc_insertion_point(field_set:strads_sysmsg.dshardctxmsg_.maxcol)
}

// -------------------------------------------------------------------

// singlebucket

// repeated int32 wid = 1 [packed = true];
inline int singlebucket::wid_size() const {
  return wid_.size();
}
inline void singlebucket::clear_wid() {
  wid_.Clear();
}
inline ::google::protobuf::int32 singlebucket::wid(int index) const {
  // @@protoc_insertion_point(field_get:strads_sysmsg.singlebucket.wid)
  return wid_.Get(index);
}
inline void singlebucket::set_wid(int index, ::google::protobuf::int32 value) {
  wid_.Set(index, value);
  // @@protoc_insertion_point(field_set:strads_sysmsg.singlebucket.wid)
}
inline void singlebucket::add_wid(::google::protobuf::int32 value) {
  wid_.Add(value);
  // @@protoc_insertion_point(field_add:strads_sysmsg.singlebucket.wid)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
singlebucket::wid() const {
  // @@protoc_insertion_point(field_list:strads_sysmsg.singlebucket.wid)
  return wid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
singlebucket::mutable_wid() {
  // @@protoc_insertion_point(field_mutable_list:strads_sysmsg.singlebucket.wid)
  return &wid_;
}

// -------------------------------------------------------------------

// sysmsg

// optional string filename = 1;
inline bool sysmsg::has_filename() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void sysmsg::set_has_filename() {
  _has_bits_[0] |= 0x00000001u;
}
inline void sysmsg::clear_has_filename() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void sysmsg::clear_filename() {
  if (filename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    filename_->clear();
  }
  clear_has_filename();
}
inline const ::std::string& sysmsg::filename() const {
  // @@protoc_insertion_point(field_get:strads_sysmsg.sysmsg.filename)
  return *filename_;
}
inline void sysmsg::set_filename(const ::std::string& value) {
  set_has_filename();
  if (filename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    filename_ = new ::std::string;
  }
  filename_->assign(value);
  // @@protoc_insertion_point(field_set:strads_sysmsg.sysmsg.filename)
}
inline void sysmsg::set_filename(const char* value) {
  set_has_filename();
  if (filename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    filename_ = new ::std::string;
  }
  filename_->assign(value);
  // @@protoc_insertion_point(field_set_char:strads_sysmsg.sysmsg.filename)
}
inline void sysmsg::set_filename(const char* value, size_t size) {
  set_has_filename();
  if (filename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    filename_ = new ::std::string;
  }
  filename_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:strads_sysmsg.sysmsg.filename)
}
inline ::std::string* sysmsg::mutable_filename() {
  set_has_filename();
  if (filename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    filename_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:strads_sysmsg.sysmsg.filename)
  return filename_;
}
inline ::std::string* sysmsg::release_filename() {
  clear_has_filename();
  if (filename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = filename_;
    filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void sysmsg::set_allocated_filename(::std::string* filename) {
  if (filename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete filename_;
  }
  if (filename) {
    set_has_filename();
    filename_ = filename;
  } else {
    clear_has_filename();
    filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:strads_sysmsg.sysmsg.filename)
}

// optional string alias = 2;
inline bool sysmsg::has_alias() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void sysmsg::set_has_alias() {
  _has_bits_[0] |= 0x00000002u;
}
inline void sysmsg::clear_has_alias() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void sysmsg::clear_alias() {
  if (alias_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    alias_->clear();
  }
  clear_has_alias();
}
inline const ::std::string& sysmsg::alias() const {
  // @@protoc_insertion_point(field_get:strads_sysmsg.sysmsg.alias)
  return *alias_;
}
inline void sysmsg::set_alias(const ::std::string& value) {
  set_has_alias();
  if (alias_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    alias_ = new ::std::string;
  }
  alias_->assign(value);
  // @@protoc_insertion_point(field_set:strads_sysmsg.sysmsg.alias)
}
inline void sysmsg::set_alias(const char* value) {
  set_has_alias();
  if (alias_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    alias_ = new ::std::string;
  }
  alias_->assign(value);
  // @@protoc_insertion_point(field_set_char:strads_sysmsg.sysmsg.alias)
}
inline void sysmsg::set_alias(const char* value, size_t size) {
  set_has_alias();
  if (alias_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    alias_ = new ::std::string;
  }
  alias_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:strads_sysmsg.sysmsg.alias)
}
inline ::std::string* sysmsg::mutable_alias() {
  set_has_alias();
  if (alias_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    alias_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:strads_sysmsg.sysmsg.alias)
  return alias_;
}
inline ::std::string* sysmsg::release_alias() {
  clear_has_alias();
  if (alias_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = alias_;
    alias_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void sysmsg::set_allocated_alias(::std::string* alias) {
  if (alias_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete alias_;
  }
  if (alias) {
    set_has_alias();
    alias_ = alias;
  } else {
    clear_has_alias();
    alias_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:strads_sysmsg.sysmsg.alias)
}

// optional int32 max_row = 3;
inline bool sysmsg::has_max_row() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void sysmsg::set_has_max_row() {
  _has_bits_[0] |= 0x00000004u;
}
inline void sysmsg::clear_has_max_row() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void sysmsg::clear_max_row() {
  max_row_ = 0;
  clear_has_max_row();
}
inline ::google::protobuf::int32 sysmsg::max_row() const {
  // @@protoc_insertion_point(field_get:strads_sysmsg.sysmsg.max_row)
  return max_row_;
}
inline void sysmsg::set_max_row(::google::protobuf::int32 value) {
  set_has_max_row();
  max_row_ = value;
  // @@protoc_insertion_point(field_set:strads_sysmsg.sysmsg.max_row)
}

// optional int32 max_col = 4;
inline bool sysmsg::has_max_col() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void sysmsg::set_has_max_col() {
  _has_bits_[0] |= 0x00000008u;
}
inline void sysmsg::clear_has_max_col() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void sysmsg::clear_max_col() {
  max_col_ = 0;
  clear_has_max_col();
}
inline ::google::protobuf::int32 sysmsg::max_col() const {
  // @@protoc_insertion_point(field_get:strads_sysmsg.sysmsg.max_col)
  return max_col_;
}
inline void sysmsg::set_max_col(::google::protobuf::int32 value) {
  set_has_max_col();
  max_col_ = value;
  // @@protoc_insertion_point(field_set:strads_sysmsg.sysmsg.max_col)
}

// repeated .strads_sysmsg.singlebucket rbuckets = 5;
inline int sysmsg::rbuckets_size() const {
  return rbuckets_.size();
}
inline void sysmsg::clear_rbuckets() {
  rbuckets_.Clear();
}
inline const ::strads_sysmsg::singlebucket& sysmsg::rbuckets(int index) const {
  // @@protoc_insertion_point(field_get:strads_sysmsg.sysmsg.rbuckets)
  return rbuckets_.Get(index);
}
inline ::strads_sysmsg::singlebucket* sysmsg::mutable_rbuckets(int index) {
  // @@protoc_insertion_point(field_mutable:strads_sysmsg.sysmsg.rbuckets)
  return rbuckets_.Mutable(index);
}
inline ::strads_sysmsg::singlebucket* sysmsg::add_rbuckets() {
  // @@protoc_insertion_point(field_add:strads_sysmsg.sysmsg.rbuckets)
  return rbuckets_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::strads_sysmsg::singlebucket >&
sysmsg::rbuckets() const {
  // @@protoc_insertion_point(field_list:strads_sysmsg.sysmsg.rbuckets)
  return rbuckets_;
}
inline ::google::protobuf::RepeatedPtrField< ::strads_sysmsg::singlebucket >*
sysmsg::mutable_rbuckets() {
  // @@protoc_insertion_point(field_mutable_list:strads_sysmsg.sysmsg.rbuckets)
  return &rbuckets_;
}

// repeated .strads_sysmsg.singlebucket cbuckets = 6;
inline int sysmsg::cbuckets_size() const {
  return cbuckets_.size();
}
inline void sysmsg::clear_cbuckets() {
  cbuckets_.Clear();
}
inline const ::strads_sysmsg::singlebucket& sysmsg::cbuckets(int index) const {
  // @@protoc_insertion_point(field_get:strads_sysmsg.sysmsg.cbuckets)
  return cbuckets_.Get(index);
}
inline ::strads_sysmsg::singlebucket* sysmsg::mutable_cbuckets(int index) {
  // @@protoc_insertion_point(field_mutable:strads_sysmsg.sysmsg.cbuckets)
  return cbuckets_.Mutable(index);
}
inline ::strads_sysmsg::singlebucket* sysmsg::add_cbuckets() {
  // @@protoc_insertion_point(field_add:strads_sysmsg.sysmsg.cbuckets)
  return cbuckets_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::strads_sysmsg::singlebucket >&
sysmsg::cbuckets() const {
  // @@protoc_insertion_point(field_list:strads_sysmsg.sysmsg.cbuckets)
  return cbuckets_;
}
inline ::google::protobuf::RepeatedPtrField< ::strads_sysmsg::singlebucket >*
sysmsg::mutable_cbuckets() {
  // @@protoc_insertion_point(field_mutable_list:strads_sysmsg.sysmsg.cbuckets)
  return &cbuckets_;
}

// optional .strads_sysmsg.dshardctxmsg_ dshardctxmsg = 7;
inline bool sysmsg::has_dshardctxmsg() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void sysmsg::set_has_dshardctxmsg() {
  _has_bits_[0] |= 0x00000040u;
}
inline void sysmsg::clear_has_dshardctxmsg() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void sysmsg::clear_dshardctxmsg() {
  if (dshardctxmsg_ != NULL) dshardctxmsg_->::strads_sysmsg::dshardctxmsg_::Clear();
  clear_has_dshardctxmsg();
}
inline const ::strads_sysmsg::dshardctxmsg_& sysmsg::dshardctxmsg() const {
  // @@protoc_insertion_point(field_get:strads_sysmsg.sysmsg.dshardctxmsg)
  return dshardctxmsg_ != NULL ? *dshardctxmsg_ : *default_instance_->dshardctxmsg_;
}
inline ::strads_sysmsg::dshardctxmsg_* sysmsg::mutable_dshardctxmsg() {
  set_has_dshardctxmsg();
  if (dshardctxmsg_ == NULL) dshardctxmsg_ = new ::strads_sysmsg::dshardctxmsg_;
  // @@protoc_insertion_point(field_mutable:strads_sysmsg.sysmsg.dshardctxmsg)
  return dshardctxmsg_;
}
inline ::strads_sysmsg::dshardctxmsg_* sysmsg::release_dshardctxmsg() {
  clear_has_dshardctxmsg();
  ::strads_sysmsg::dshardctxmsg_* temp = dshardctxmsg_;
  dshardctxmsg_ = NULL;
  return temp;
}
inline void sysmsg::set_allocated_dshardctxmsg(::strads_sysmsg::dshardctxmsg_* dshardctxmsg) {
  delete dshardctxmsg_;
  dshardctxmsg_ = dshardctxmsg;
  if (dshardctxmsg) {
    set_has_dshardctxmsg();
  } else {
    clear_has_dshardctxmsg();
  }
  // @@protoc_insertion_point(field_set_allocated:strads_sysmsg.sysmsg.dshardctxmsg)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace strads_sysmsg

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::strads_sysmsg::matrix_type> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::strads_sysmsg::matrix_type>() {
  return ::strads_sysmsg::matrix_type_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_strads_2eproto__INCLUDED
