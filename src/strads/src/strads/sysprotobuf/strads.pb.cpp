// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: strads.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "strads.pb.hpp"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace strads_sysmsg {

namespace {

const ::google::protobuf::Descriptor* dshardctxmsg__descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  dshardctxmsg__reflection_ = NULL;
const ::google::protobuf::Descriptor* singlebucket_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  singlebucket_reflection_ = NULL;
const ::google::protobuf::Descriptor* sysmsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  sysmsg_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* matrix_type_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_strads_2eproto() {
  protobuf_AddDesc_strads_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "strads.proto");
  GOOGLE_CHECK(file != NULL);
  dshardctxmsg__descriptor_ = file->message_type(0);
  static const int dshardctxmsg__offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dshardctxmsg_, fn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dshardctxmsg_, alias_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dshardctxmsg_, mtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dshardctxmsg_, maxrow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dshardctxmsg_, maxcol_),
  };
  dshardctxmsg__reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      dshardctxmsg__descriptor_,
      dshardctxmsg_::default_instance_,
      dshardctxmsg__offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dshardctxmsg_, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dshardctxmsg_, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(dshardctxmsg_));
  singlebucket_descriptor_ = file->message_type(1);
  static const int singlebucket_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(singlebucket, wid_),
  };
  singlebucket_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      singlebucket_descriptor_,
      singlebucket::default_instance_,
      singlebucket_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(singlebucket, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(singlebucket, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(singlebucket));
  sysmsg_descriptor_ = file->message_type(2);
  static const int sysmsg_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sysmsg, filename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sysmsg, alias_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sysmsg, max_row_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sysmsg, max_col_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sysmsg, rbuckets_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sysmsg, cbuckets_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sysmsg, dshardctxmsg_),
  };
  sysmsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      sysmsg_descriptor_,
      sysmsg::default_instance_,
      sysmsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sysmsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sysmsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(sysmsg));
  matrix_type_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_strads_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    dshardctxmsg__descriptor_, &dshardctxmsg_::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    singlebucket_descriptor_, &singlebucket::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    sysmsg_descriptor_, &sysmsg::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_strads_2eproto() {
  delete dshardctxmsg_::default_instance_;
  delete dshardctxmsg__reflection_;
  delete singlebucket::default_instance_;
  delete singlebucket_reflection_;
  delete sysmsg::default_instance_;
  delete sysmsg_reflection_;
}

void protobuf_AddDesc_strads_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014strads.proto\022\rstrads_sysmsg\"u\n\rdshardc"
    "txmsg_\022\n\n\002fn\030\001 \002(\t\022\r\n\005alias\030\002 \002(\t\022)\n\005mty"
    "pe\030\003 \002(\0162\032.strads_sysmsg.matrix_type\022\016\n\006"
    "maxrow\030\004 \002(\004\022\016\n\006maxcol\030\005 \002(\004\"\037\n\014singlebu"
    "cket\022\017\n\003wid\030\001 \003(\005B\002\020\001\"\335\001\n\006sysmsg\022\020\n\010file"
    "name\030\001 \001(\t\022\r\n\005alias\030\002 \001(\t\022\017\n\007max_row\030\003 \001"
    "(\005\022\017\n\007max_col\030\004 \001(\005\022-\n\010rbuckets\030\005 \003(\0132\033."
    "strads_sysmsg.singlebucket\022-\n\010cbuckets\030\006"
    " \003(\0132\033.strads_sysmsg.singlebucket\0222\n\014dsh"
    "ardctxmsg\030\007 \001(\0132\034.strads_sysmsg.dshardct"
    "xmsg_*J\n\013matrix_type\022\n\n\006cm_map\020\000\022\n\n\006cm_v"
    "ec\020\001\022\n\n\006rm_map\020\002\022\n\n\006rm_vec\020\003\022\013\n\007dense2d\020"
    "\004", 481);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "strads.proto", &protobuf_RegisterTypes);
  dshardctxmsg_::default_instance_ = new dshardctxmsg_();
  singlebucket::default_instance_ = new singlebucket();
  sysmsg::default_instance_ = new sysmsg();
  dshardctxmsg_::default_instance_->InitAsDefaultInstance();
  singlebucket::default_instance_->InitAsDefaultInstance();
  sysmsg::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_strads_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_strads_2eproto {
  StaticDescriptorInitializer_strads_2eproto() {
    protobuf_AddDesc_strads_2eproto();
  }
} static_descriptor_initializer_strads_2eproto_;
const ::google::protobuf::EnumDescriptor* matrix_type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return matrix_type_descriptor_;
}
bool matrix_type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int dshardctxmsg_::kFnFieldNumber;
const int dshardctxmsg_::kAliasFieldNumber;
const int dshardctxmsg_::kMtypeFieldNumber;
const int dshardctxmsg_::kMaxrowFieldNumber;
const int dshardctxmsg_::kMaxcolFieldNumber;
#endif  // !_MSC_VER

dshardctxmsg_::dshardctxmsg_()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:strads_sysmsg.dshardctxmsg_)
}

void dshardctxmsg_::InitAsDefaultInstance() {
}

dshardctxmsg_::dshardctxmsg_(const dshardctxmsg_& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:strads_sysmsg.dshardctxmsg_)
}

void dshardctxmsg_::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  fn_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  alias_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mtype_ = 0;
  maxrow_ = GOOGLE_ULONGLONG(0);
  maxcol_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

dshardctxmsg_::~dshardctxmsg_() {
  // @@protoc_insertion_point(destructor:strads_sysmsg.dshardctxmsg_)
  SharedDtor();
}

void dshardctxmsg_::SharedDtor() {
  if (fn_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete fn_;
  }
  if (alias_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete alias_;
  }
  if (this != default_instance_) {
  }
}

void dshardctxmsg_::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* dshardctxmsg_::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return dshardctxmsg__descriptor_;
}

const dshardctxmsg_& dshardctxmsg_::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_strads_2eproto();
  return *default_instance_;
}

dshardctxmsg_* dshardctxmsg_::default_instance_ = NULL;

dshardctxmsg_* dshardctxmsg_::New() const {
  return new dshardctxmsg_;
}

void dshardctxmsg_::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<dshardctxmsg_*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(maxrow_, mtype_);
    if (has_fn()) {
      if (fn_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        fn_->clear();
      }
    }
    if (has_alias()) {
      if (alias_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        alias_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool dshardctxmsg_::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:strads_sysmsg.dshardctxmsg_)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string fn = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fn()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->fn().data(), this->fn().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "fn");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_alias;
        break;
      }

      // required string alias = 2;
      case 2: {
        if (tag == 18) {
         parse_alias:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_alias()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->alias().data(), this->alias().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "alias");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_mtype;
        break;
      }

      // required .strads_sysmsg.matrix_type mtype = 3;
      case 3: {
        if (tag == 24) {
         parse_mtype:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::strads_sysmsg::matrix_type_IsValid(value)) {
            set_mtype(static_cast< ::strads_sysmsg::matrix_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_maxrow;
        break;
      }

      // required uint64 maxrow = 4;
      case 4: {
        if (tag == 32) {
         parse_maxrow:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &maxrow_)));
          set_has_maxrow();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_maxcol;
        break;
      }

      // required uint64 maxcol = 5;
      case 5: {
        if (tag == 40) {
         parse_maxcol:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &maxcol_)));
          set_has_maxcol();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:strads_sysmsg.dshardctxmsg_)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:strads_sysmsg.dshardctxmsg_)
  return false;
#undef DO_
}

void dshardctxmsg_::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:strads_sysmsg.dshardctxmsg_)
  // required string fn = 1;
  if (has_fn()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fn().data(), this->fn().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fn");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->fn(), output);
  }

  // required string alias = 2;
  if (has_alias()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->alias().data(), this->alias().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "alias");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->alias(), output);
  }

  // required .strads_sysmsg.matrix_type mtype = 3;
  if (has_mtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->mtype(), output);
  }

  // required uint64 maxrow = 4;
  if (has_maxrow()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->maxrow(), output);
  }

  // required uint64 maxcol = 5;
  if (has_maxcol()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->maxcol(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:strads_sysmsg.dshardctxmsg_)
}

::google::protobuf::uint8* dshardctxmsg_::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:strads_sysmsg.dshardctxmsg_)
  // required string fn = 1;
  if (has_fn()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fn().data(), this->fn().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fn");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->fn(), target);
  }

  // required string alias = 2;
  if (has_alias()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->alias().data(), this->alias().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "alias");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->alias(), target);
  }

  // required .strads_sysmsg.matrix_type mtype = 3;
  if (has_mtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->mtype(), target);
  }

  // required uint64 maxrow = 4;
  if (has_maxrow()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->maxrow(), target);
  }

  // required uint64 maxcol = 5;
  if (has_maxcol()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->maxcol(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:strads_sysmsg.dshardctxmsg_)
  return target;
}

int dshardctxmsg_::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string fn = 1;
    if (has_fn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fn());
    }

    // required string alias = 2;
    if (has_alias()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->alias());
    }

    // required .strads_sysmsg.matrix_type mtype = 3;
    if (has_mtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->mtype());
    }

    // required uint64 maxrow = 4;
    if (has_maxrow()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->maxrow());
    }

    // required uint64 maxcol = 5;
    if (has_maxcol()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->maxcol());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void dshardctxmsg_::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const dshardctxmsg_* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const dshardctxmsg_*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void dshardctxmsg_::MergeFrom(const dshardctxmsg_& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fn()) {
      set_fn(from.fn());
    }
    if (from.has_alias()) {
      set_alias(from.alias());
    }
    if (from.has_mtype()) {
      set_mtype(from.mtype());
    }
    if (from.has_maxrow()) {
      set_maxrow(from.maxrow());
    }
    if (from.has_maxcol()) {
      set_maxcol(from.maxcol());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void dshardctxmsg_::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void dshardctxmsg_::CopyFrom(const dshardctxmsg_& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool dshardctxmsg_::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void dshardctxmsg_::Swap(dshardctxmsg_* other) {
  if (other != this) {
    std::swap(fn_, other->fn_);
    std::swap(alias_, other->alias_);
    std::swap(mtype_, other->mtype_);
    std::swap(maxrow_, other->maxrow_);
    std::swap(maxcol_, other->maxcol_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata dshardctxmsg_::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = dshardctxmsg__descriptor_;
  metadata.reflection = dshardctxmsg__reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int singlebucket::kWidFieldNumber;
#endif  // !_MSC_VER

singlebucket::singlebucket()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:strads_sysmsg.singlebucket)
}

void singlebucket::InitAsDefaultInstance() {
}

singlebucket::singlebucket(const singlebucket& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:strads_sysmsg.singlebucket)
}

void singlebucket::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

singlebucket::~singlebucket() {
  // @@protoc_insertion_point(destructor:strads_sysmsg.singlebucket)
  SharedDtor();
}

void singlebucket::SharedDtor() {
  if (this != default_instance_) {
  }
}

void singlebucket::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* singlebucket::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return singlebucket_descriptor_;
}

const singlebucket& singlebucket::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_strads_2eproto();
  return *default_instance_;
}

singlebucket* singlebucket::default_instance_ = NULL;

singlebucket* singlebucket::New() const {
  return new singlebucket;
}

void singlebucket::Clear() {
  wid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool singlebucket::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:strads_sysmsg.singlebucket)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 wid = 1 [packed = true];
      case 1: {
        if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_wid())));
        } else if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 10, input, this->mutable_wid())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:strads_sysmsg.singlebucket)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:strads_sysmsg.singlebucket)
  return false;
#undef DO_
}

void singlebucket::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:strads_sysmsg.singlebucket)
  // repeated int32 wid = 1 [packed = true];
  if (this->wid_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_wid_cached_byte_size_);
  }
  for (int i = 0; i < this->wid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->wid(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:strads_sysmsg.singlebucket)
}

::google::protobuf::uint8* singlebucket::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:strads_sysmsg.singlebucket)
  // repeated int32 wid = 1 [packed = true];
  if (this->wid_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _wid_cached_byte_size_, target);
  }
  for (int i = 0; i < this->wid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->wid(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:strads_sysmsg.singlebucket)
  return target;
}

int singlebucket::ByteSize() const {
  int total_size = 0;

  // repeated int32 wid = 1 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->wid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->wid(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _wid_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void singlebucket::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const singlebucket* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const singlebucket*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void singlebucket::MergeFrom(const singlebucket& from) {
  GOOGLE_CHECK_NE(&from, this);
  wid_.MergeFrom(from.wid_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void singlebucket::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void singlebucket::CopyFrom(const singlebucket& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool singlebucket::IsInitialized() const {

  return true;
}

void singlebucket::Swap(singlebucket* other) {
  if (other != this) {
    wid_.Swap(&other->wid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata singlebucket::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = singlebucket_descriptor_;
  metadata.reflection = singlebucket_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int sysmsg::kFilenameFieldNumber;
const int sysmsg::kAliasFieldNumber;
const int sysmsg::kMaxRowFieldNumber;
const int sysmsg::kMaxColFieldNumber;
const int sysmsg::kRbucketsFieldNumber;
const int sysmsg::kCbucketsFieldNumber;
const int sysmsg::kDshardctxmsgFieldNumber;
#endif  // !_MSC_VER

sysmsg::sysmsg()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:strads_sysmsg.sysmsg)
}

void sysmsg::InitAsDefaultInstance() {
  dshardctxmsg_ = const_cast< ::strads_sysmsg::dshardctxmsg_*>(&::strads_sysmsg::dshardctxmsg_::default_instance());
}

sysmsg::sysmsg(const sysmsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:strads_sysmsg.sysmsg)
}

void sysmsg::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  alias_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  max_row_ = 0;
  max_col_ = 0;
  dshardctxmsg_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

sysmsg::~sysmsg() {
  // @@protoc_insertion_point(destructor:strads_sysmsg.sysmsg)
  SharedDtor();
}

void sysmsg::SharedDtor() {
  if (filename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete filename_;
  }
  if (alias_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete alias_;
  }
  if (this != default_instance_) {
    delete dshardctxmsg_;
  }
}

void sysmsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* sysmsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return sysmsg_descriptor_;
}

const sysmsg& sysmsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_strads_2eproto();
  return *default_instance_;
}

sysmsg* sysmsg::default_instance_ = NULL;

sysmsg* sysmsg::New() const {
  return new sysmsg;
}

void sysmsg::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<sysmsg*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 79) {
    ZR_(max_row_, max_col_);
    if (has_filename()) {
      if (filename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        filename_->clear();
      }
    }
    if (has_alias()) {
      if (alias_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        alias_->clear();
      }
    }
    if (has_dshardctxmsg()) {
      if (dshardctxmsg_ != NULL) dshardctxmsg_->::strads_sysmsg::dshardctxmsg_::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  rbuckets_.Clear();
  cbuckets_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool sysmsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:strads_sysmsg.sysmsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string filename = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->filename().data(), this->filename().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "filename");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_alias;
        break;
      }

      // optional string alias = 2;
      case 2: {
        if (tag == 18) {
         parse_alias:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_alias()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->alias().data(), this->alias().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "alias");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_max_row;
        break;
      }

      // optional int32 max_row = 3;
      case 3: {
        if (tag == 24) {
         parse_max_row:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_row_)));
          set_has_max_row();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_max_col;
        break;
      }

      // optional int32 max_col = 4;
      case 4: {
        if (tag == 32) {
         parse_max_col:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_col_)));
          set_has_max_col();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_rbuckets;
        break;
      }

      // repeated .strads_sysmsg.singlebucket rbuckets = 5;
      case 5: {
        if (tag == 42) {
         parse_rbuckets:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rbuckets()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_rbuckets;
        if (input->ExpectTag(50)) goto parse_cbuckets;
        break;
      }

      // repeated .strads_sysmsg.singlebucket cbuckets = 6;
      case 6: {
        if (tag == 50) {
         parse_cbuckets:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cbuckets()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_cbuckets;
        if (input->ExpectTag(58)) goto parse_dshardctxmsg;
        break;
      }

      // optional .strads_sysmsg.dshardctxmsg_ dshardctxmsg = 7;
      case 7: {
        if (tag == 58) {
         parse_dshardctxmsg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dshardctxmsg()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:strads_sysmsg.sysmsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:strads_sysmsg.sysmsg)
  return false;
#undef DO_
}

void sysmsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:strads_sysmsg.sysmsg)
  // optional string filename = 1;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "filename");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->filename(), output);
  }

  // optional string alias = 2;
  if (has_alias()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->alias().data(), this->alias().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "alias");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->alias(), output);
  }

  // optional int32 max_row = 3;
  if (has_max_row()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->max_row(), output);
  }

  // optional int32 max_col = 4;
  if (has_max_col()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->max_col(), output);
  }

  // repeated .strads_sysmsg.singlebucket rbuckets = 5;
  for (int i = 0; i < this->rbuckets_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->rbuckets(i), output);
  }

  // repeated .strads_sysmsg.singlebucket cbuckets = 6;
  for (int i = 0; i < this->cbuckets_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->cbuckets(i), output);
  }

  // optional .strads_sysmsg.dshardctxmsg_ dshardctxmsg = 7;
  if (has_dshardctxmsg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->dshardctxmsg(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:strads_sysmsg.sysmsg)
}

::google::protobuf::uint8* sysmsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:strads_sysmsg.sysmsg)
  // optional string filename = 1;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "filename");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->filename(), target);
  }

  // optional string alias = 2;
  if (has_alias()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->alias().data(), this->alias().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "alias");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->alias(), target);
  }

  // optional int32 max_row = 3;
  if (has_max_row()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->max_row(), target);
  }

  // optional int32 max_col = 4;
  if (has_max_col()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->max_col(), target);
  }

  // repeated .strads_sysmsg.singlebucket rbuckets = 5;
  for (int i = 0; i < this->rbuckets_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->rbuckets(i), target);
  }

  // repeated .strads_sysmsg.singlebucket cbuckets = 6;
  for (int i = 0; i < this->cbuckets_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->cbuckets(i), target);
  }

  // optional .strads_sysmsg.dshardctxmsg_ dshardctxmsg = 7;
  if (has_dshardctxmsg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->dshardctxmsg(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:strads_sysmsg.sysmsg)
  return target;
}

int sysmsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string filename = 1;
    if (has_filename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filename());
    }

    // optional string alias = 2;
    if (has_alias()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->alias());
    }

    // optional int32 max_row = 3;
    if (has_max_row()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_row());
    }

    // optional int32 max_col = 4;
    if (has_max_col()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_col());
    }

    // optional .strads_sysmsg.dshardctxmsg_ dshardctxmsg = 7;
    if (has_dshardctxmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dshardctxmsg());
    }

  }
  // repeated .strads_sysmsg.singlebucket rbuckets = 5;
  total_size += 1 * this->rbuckets_size();
  for (int i = 0; i < this->rbuckets_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rbuckets(i));
  }

  // repeated .strads_sysmsg.singlebucket cbuckets = 6;
  total_size += 1 * this->cbuckets_size();
  for (int i = 0; i < this->cbuckets_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cbuckets(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sysmsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const sysmsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const sysmsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void sysmsg::MergeFrom(const sysmsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  rbuckets_.MergeFrom(from.rbuckets_);
  cbuckets_.MergeFrom(from.cbuckets_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_filename()) {
      set_filename(from.filename());
    }
    if (from.has_alias()) {
      set_alias(from.alias());
    }
    if (from.has_max_row()) {
      set_max_row(from.max_row());
    }
    if (from.has_max_col()) {
      set_max_col(from.max_col());
    }
    if (from.has_dshardctxmsg()) {
      mutable_dshardctxmsg()->::strads_sysmsg::dshardctxmsg_::MergeFrom(from.dshardctxmsg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void sysmsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void sysmsg::CopyFrom(const sysmsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sysmsg::IsInitialized() const {

  if (has_dshardctxmsg()) {
    if (!this->dshardctxmsg().IsInitialized()) return false;
  }
  return true;
}

void sysmsg::Swap(sysmsg* other) {
  if (other != this) {
    std::swap(filename_, other->filename_);
    std::swap(alias_, other->alias_);
    std::swap(max_row_, other->max_row_);
    std::swap(max_col_, other->max_col_);
    rbuckets_.Swap(&other->rbuckets_);
    cbuckets_.Swap(&other->cbuckets_);
    std::swap(dshardctxmsg_, other->dshardctxmsg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata sysmsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = sysmsg_descriptor_;
  metadata.reflection = sysmsg_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace strads_sysmsg

// @@protoc_insertion_point(global_scope)
