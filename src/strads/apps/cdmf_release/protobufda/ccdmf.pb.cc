// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ccdmf.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ccdmf.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace stradsccdmf {

namespace {

const ::google::protobuf::Descriptor* initinfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  initinfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* singleint_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  singleint_reflection_ = NULL;
const ::google::protobuf::Descriptor* singlebucket_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  singlebucket_reflection_ = NULL;
const ::google::protobuf::Descriptor* topicrow_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  topicrow_reflection_ = NULL;
const ::google::protobuf::Descriptor* controlmsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  controlmsg_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* controlmsg_msgtype_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_ccdmf_2eproto() {
  protobuf_AddDesc_ccdmf_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ccdmf.proto");
  GOOGLE_CHECK(file != NULL);
  initinfo_descriptor_ = file->message_type(0);
  static const int initinfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(initinfo, tokencnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(initinfo, docnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(initinfo, wordmax_),
  };
  initinfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      initinfo_descriptor_,
      initinfo::default_instance_,
      initinfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(initinfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(initinfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(initinfo));
  singleint_descriptor_ = file->message_type(1);
  static const int singleint_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(singleint, ivalue_),
  };
  singleint_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      singleint_descriptor_,
      singleint::default_instance_,
      singleint_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(singleint, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(singleint, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(singleint));
  singlebucket_descriptor_ = file->message_type(2);
  static const int singlebucket_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(singlebucket, wid_),
  };
  singlebucket_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      singlebucket_descriptor_,
      singlebucket::default_instance_,
      singlebucket_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(singlebucket, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(singlebucket, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(singlebucket));
  topicrow_descriptor_ = file->message_type(3);
  static const int topicrow_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(topicrow, wordid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(topicrow, tid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(topicrow, assigned_),
  };
  topicrow_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      topicrow_descriptor_,
      topicrow::default_instance_,
      topicrow_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(topicrow, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(topicrow, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(topicrow));
  controlmsg_descriptor_ = file->message_type(4);
  static const int controlmsg_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(controlmsg, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(controlmsg, ringsrc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(controlmsg, ringdst_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(controlmsg, rows_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(controlmsg, cols_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(controlmsg, init_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(controlmsg, buckets_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(controlmsg, partialobj_),
  };
  controlmsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      controlmsg_descriptor_,
      controlmsg::default_instance_,
      controlmsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(controlmsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(controlmsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(controlmsg));
  controlmsg_msgtype_descriptor_ = controlmsg_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ccdmf_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    initinfo_descriptor_, &initinfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    singleint_descriptor_, &singleint::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    singlebucket_descriptor_, &singlebucket::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    topicrow_descriptor_, &topicrow::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    controlmsg_descriptor_, &controlmsg::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ccdmf_2eproto() {
  delete initinfo::default_instance_;
  delete initinfo_reflection_;
  delete singleint::default_instance_;
  delete singleint_reflection_;
  delete singlebucket::default_instance_;
  delete singlebucket_reflection_;
  delete topicrow::default_instance_;
  delete topicrow_reflection_;
  delete controlmsg::default_instance_;
  delete controlmsg_reflection_;
}

void protobuf_AddDesc_ccdmf_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013ccdmf.proto\022\013stradsccdmf\"<\n\010initinfo\022\020"
    "\n\010tokencnt\030\001 \002(\005\022\r\n\005docnt\030\002 \002(\005\022\017\n\007wordm"
    "ax\030\003 \002(\005\"\033\n\tsingleint\022\016\n\006ivalue\030\001 \002(\005\"\037\n"
    "\014singlebucket\022\017\n\003wid\030\001 \003(\005B\002\020\001\"A\n\010topicr"
    "ow\022\016\n\006wordid\030\001 \001(\005\022\017\n\003tid\030\002 \003(\005B\002\020\001\022\024\n\010a"
    "ssigned\030\003 \003(\005B\002\020\001\"\262\002\n\ncontrolmsg\0226\n\004type"
    "\030\001 \001(\0162\037.stradsccdmf.controlmsg.msgtype:"
    "\007UNKNOWN\022\017\n\007ringsrc\030\002 \001(\005\022\017\n\007ringdst\030\003 \001"
    "(\005\022\014\n\004rows\030\004 \001(\005\022\014\n\004cols\030\005 \001(\005\022#\n\004init\030\006"
    " \003(\0132\025.stradsccdmf.initinfo\022*\n\007buckets\030\007"
    " \003(\0132\031.stradsccdmf.singlebucket\022\022\n\nparti"
    "alobj\030\010 \001(\001\"I\n\007msgtype\022\n\n\006BUCKET\020\001\022\014\n\010EX"
    "ITRING\020\002\022\n\n\006UPDATE\020\003\022\013\n\007OBJSYNC\020\004\022\013\n\007UNK"
    "NOWN\020\005", 526);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ccdmf.proto", &protobuf_RegisterTypes);
  initinfo::default_instance_ = new initinfo();
  singleint::default_instance_ = new singleint();
  singlebucket::default_instance_ = new singlebucket();
  topicrow::default_instance_ = new topicrow();
  controlmsg::default_instance_ = new controlmsg();
  initinfo::default_instance_->InitAsDefaultInstance();
  singleint::default_instance_->InitAsDefaultInstance();
  singlebucket::default_instance_->InitAsDefaultInstance();
  topicrow::default_instance_->InitAsDefaultInstance();
  controlmsg::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ccdmf_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ccdmf_2eproto {
  StaticDescriptorInitializer_ccdmf_2eproto() {
    protobuf_AddDesc_ccdmf_2eproto();
  }
} static_descriptor_initializer_ccdmf_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int initinfo::kTokencntFieldNumber;
const int initinfo::kDocntFieldNumber;
const int initinfo::kWordmaxFieldNumber;
#endif  // !_MSC_VER

initinfo::initinfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:stradsccdmf.initinfo)
}

void initinfo::InitAsDefaultInstance() {
}

initinfo::initinfo(const initinfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:stradsccdmf.initinfo)
}

void initinfo::SharedCtor() {
  _cached_size_ = 0;
  tokencnt_ = 0;
  docnt_ = 0;
  wordmax_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

initinfo::~initinfo() {
  // @@protoc_insertion_point(destructor:stradsccdmf.initinfo)
  SharedDtor();
}

void initinfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void initinfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* initinfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return initinfo_descriptor_;
}

const initinfo& initinfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ccdmf_2eproto();
  return *default_instance_;
}

initinfo* initinfo::default_instance_ = NULL;

initinfo* initinfo::New() const {
  return new initinfo;
}

void initinfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<initinfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(tokencnt_, wordmax_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool initinfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:stradsccdmf.initinfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 tokencnt = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tokencnt_)));
          set_has_tokencnt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_docnt;
        break;
      }

      // required int32 docnt = 2;
      case 2: {
        if (tag == 16) {
         parse_docnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &docnt_)));
          set_has_docnt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_wordmax;
        break;
      }

      // required int32 wordmax = 3;
      case 3: {
        if (tag == 24) {
         parse_wordmax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wordmax_)));
          set_has_wordmax();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:stradsccdmf.initinfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:stradsccdmf.initinfo)
  return false;
#undef DO_
}

void initinfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:stradsccdmf.initinfo)
  // required int32 tokencnt = 1;
  if (has_tokencnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->tokencnt(), output);
  }

  // required int32 docnt = 2;
  if (has_docnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->docnt(), output);
  }

  // required int32 wordmax = 3;
  if (has_wordmax()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->wordmax(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:stradsccdmf.initinfo)
}

::google::protobuf::uint8* initinfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:stradsccdmf.initinfo)
  // required int32 tokencnt = 1;
  if (has_tokencnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->tokencnt(), target);
  }

  // required int32 docnt = 2;
  if (has_docnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->docnt(), target);
  }

  // required int32 wordmax = 3;
  if (has_wordmax()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->wordmax(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:stradsccdmf.initinfo)
  return target;
}

int initinfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 tokencnt = 1;
    if (has_tokencnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tokencnt());
    }

    // required int32 docnt = 2;
    if (has_docnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->docnt());
    }

    // required int32 wordmax = 3;
    if (has_wordmax()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wordmax());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void initinfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const initinfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const initinfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void initinfo::MergeFrom(const initinfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tokencnt()) {
      set_tokencnt(from.tokencnt());
    }
    if (from.has_docnt()) {
      set_docnt(from.docnt());
    }
    if (from.has_wordmax()) {
      set_wordmax(from.wordmax());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void initinfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void initinfo::CopyFrom(const initinfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool initinfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void initinfo::Swap(initinfo* other) {
  if (other != this) {
    std::swap(tokencnt_, other->tokencnt_);
    std::swap(docnt_, other->docnt_);
    std::swap(wordmax_, other->wordmax_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata initinfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = initinfo_descriptor_;
  metadata.reflection = initinfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int singleint::kIvalueFieldNumber;
#endif  // !_MSC_VER

singleint::singleint()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:stradsccdmf.singleint)
}

void singleint::InitAsDefaultInstance() {
}

singleint::singleint(const singleint& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:stradsccdmf.singleint)
}

void singleint::SharedCtor() {
  _cached_size_ = 0;
  ivalue_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

singleint::~singleint() {
  // @@protoc_insertion_point(destructor:stradsccdmf.singleint)
  SharedDtor();
}

void singleint::SharedDtor() {
  if (this != default_instance_) {
  }
}

void singleint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* singleint::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return singleint_descriptor_;
}

const singleint& singleint::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ccdmf_2eproto();
  return *default_instance_;
}

singleint* singleint::default_instance_ = NULL;

singleint* singleint::New() const {
  return new singleint;
}

void singleint::Clear() {
  ivalue_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool singleint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:stradsccdmf.singleint)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ivalue = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ivalue_)));
          set_has_ivalue();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:stradsccdmf.singleint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:stradsccdmf.singleint)
  return false;
#undef DO_
}

void singleint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:stradsccdmf.singleint)
  // required int32 ivalue = 1;
  if (has_ivalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ivalue(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:stradsccdmf.singleint)
}

::google::protobuf::uint8* singleint::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:stradsccdmf.singleint)
  // required int32 ivalue = 1;
  if (has_ivalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ivalue(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:stradsccdmf.singleint)
  return target;
}

int singleint::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ivalue = 1;
    if (has_ivalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ivalue());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void singleint::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const singleint* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const singleint*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void singleint::MergeFrom(const singleint& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ivalue()) {
      set_ivalue(from.ivalue());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void singleint::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void singleint::CopyFrom(const singleint& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool singleint::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void singleint::Swap(singleint* other) {
  if (other != this) {
    std::swap(ivalue_, other->ivalue_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata singleint::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = singleint_descriptor_;
  metadata.reflection = singleint_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int singlebucket::kWidFieldNumber;
#endif  // !_MSC_VER

singlebucket::singlebucket()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:stradsccdmf.singlebucket)
}

void singlebucket::InitAsDefaultInstance() {
}

singlebucket::singlebucket(const singlebucket& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:stradsccdmf.singlebucket)
}

void singlebucket::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

singlebucket::~singlebucket() {
  // @@protoc_insertion_point(destructor:stradsccdmf.singlebucket)
  SharedDtor();
}

void singlebucket::SharedDtor() {
  if (this != default_instance_) {
  }
}

void singlebucket::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* singlebucket::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return singlebucket_descriptor_;
}

const singlebucket& singlebucket::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ccdmf_2eproto();
  return *default_instance_;
}

singlebucket* singlebucket::default_instance_ = NULL;

singlebucket* singlebucket::New() const {
  return new singlebucket;
}

void singlebucket::Clear() {
  wid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool singlebucket::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:stradsccdmf.singlebucket)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 wid = 1 [packed = true];
      case 1: {
        if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_wid())));
        } else if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 10, input, this->mutable_wid())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:stradsccdmf.singlebucket)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:stradsccdmf.singlebucket)
  return false;
#undef DO_
}

void singlebucket::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:stradsccdmf.singlebucket)
  // repeated int32 wid = 1 [packed = true];
  if (this->wid_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_wid_cached_byte_size_);
  }
  for (int i = 0; i < this->wid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->wid(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:stradsccdmf.singlebucket)
}

::google::protobuf::uint8* singlebucket::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:stradsccdmf.singlebucket)
  // repeated int32 wid = 1 [packed = true];
  if (this->wid_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _wid_cached_byte_size_, target);
  }
  for (int i = 0; i < this->wid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->wid(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:stradsccdmf.singlebucket)
  return target;
}

int singlebucket::ByteSize() const {
  int total_size = 0;

  // repeated int32 wid = 1 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->wid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->wid(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _wid_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void singlebucket::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const singlebucket* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const singlebucket*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void singlebucket::MergeFrom(const singlebucket& from) {
  GOOGLE_CHECK_NE(&from, this);
  wid_.MergeFrom(from.wid_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void singlebucket::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void singlebucket::CopyFrom(const singlebucket& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool singlebucket::IsInitialized() const {

  return true;
}

void singlebucket::Swap(singlebucket* other) {
  if (other != this) {
    wid_.Swap(&other->wid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata singlebucket::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = singlebucket_descriptor_;
  metadata.reflection = singlebucket_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int topicrow::kWordidFieldNumber;
const int topicrow::kTidFieldNumber;
const int topicrow::kAssignedFieldNumber;
#endif  // !_MSC_VER

topicrow::topicrow()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:stradsccdmf.topicrow)
}

void topicrow::InitAsDefaultInstance() {
}

topicrow::topicrow(const topicrow& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:stradsccdmf.topicrow)
}

void topicrow::SharedCtor() {
  _cached_size_ = 0;
  wordid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

topicrow::~topicrow() {
  // @@protoc_insertion_point(destructor:stradsccdmf.topicrow)
  SharedDtor();
}

void topicrow::SharedDtor() {
  if (this != default_instance_) {
  }
}

void topicrow::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* topicrow::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return topicrow_descriptor_;
}

const topicrow& topicrow::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ccdmf_2eproto();
  return *default_instance_;
}

topicrow* topicrow::default_instance_ = NULL;

topicrow* topicrow::New() const {
  return new topicrow;
}

void topicrow::Clear() {
  wordid_ = 0;
  tid_.Clear();
  assigned_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool topicrow::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:stradsccdmf.topicrow)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 wordid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wordid_)));
          set_has_wordid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_tid;
        break;
      }

      // repeated int32 tid = 2 [packed = true];
      case 2: {
        if (tag == 18) {
         parse_tid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_tid())));
        } else if (tag == 16) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 18, input, this->mutable_tid())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_assigned;
        break;
      }

      // repeated int32 assigned = 3 [packed = true];
      case 3: {
        if (tag == 26) {
         parse_assigned:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_assigned())));
        } else if (tag == 24) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 26, input, this->mutable_assigned())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:stradsccdmf.topicrow)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:stradsccdmf.topicrow)
  return false;
#undef DO_
}

void topicrow::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:stradsccdmf.topicrow)
  // optional int32 wordid = 1;
  if (has_wordid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->wordid(), output);
  }

  // repeated int32 tid = 2 [packed = true];
  if (this->tid_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_tid_cached_byte_size_);
  }
  for (int i = 0; i < this->tid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->tid(i), output);
  }

  // repeated int32 assigned = 3 [packed = true];
  if (this->assigned_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_assigned_cached_byte_size_);
  }
  for (int i = 0; i < this->assigned_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->assigned(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:stradsccdmf.topicrow)
}

::google::protobuf::uint8* topicrow::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:stradsccdmf.topicrow)
  // optional int32 wordid = 1;
  if (has_wordid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->wordid(), target);
  }

  // repeated int32 tid = 2 [packed = true];
  if (this->tid_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _tid_cached_byte_size_, target);
  }
  for (int i = 0; i < this->tid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->tid(i), target);
  }

  // repeated int32 assigned = 3 [packed = true];
  if (this->assigned_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _assigned_cached_byte_size_, target);
  }
  for (int i = 0; i < this->assigned_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->assigned(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:stradsccdmf.topicrow)
  return target;
}

int topicrow::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 wordid = 1;
    if (has_wordid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wordid());
    }

  }
  // repeated int32 tid = 2 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->tid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->tid(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _tid_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated int32 assigned = 3 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->assigned_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->assigned(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _assigned_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void topicrow::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const topicrow* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const topicrow*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void topicrow::MergeFrom(const topicrow& from) {
  GOOGLE_CHECK_NE(&from, this);
  tid_.MergeFrom(from.tid_);
  assigned_.MergeFrom(from.assigned_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_wordid()) {
      set_wordid(from.wordid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void topicrow::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void topicrow::CopyFrom(const topicrow& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool topicrow::IsInitialized() const {

  return true;
}

void topicrow::Swap(topicrow* other) {
  if (other != this) {
    std::swap(wordid_, other->wordid_);
    tid_.Swap(&other->tid_);
    assigned_.Swap(&other->assigned_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata topicrow::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = topicrow_descriptor_;
  metadata.reflection = topicrow_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* controlmsg_msgtype_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return controlmsg_msgtype_descriptor_;
}
bool controlmsg_msgtype_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const controlmsg_msgtype controlmsg::BUCKET;
const controlmsg_msgtype controlmsg::EXITRING;
const controlmsg_msgtype controlmsg::UPDATE;
const controlmsg_msgtype controlmsg::OBJSYNC;
const controlmsg_msgtype controlmsg::UNKNOWN;
const controlmsg_msgtype controlmsg::msgtype_MIN;
const controlmsg_msgtype controlmsg::msgtype_MAX;
const int controlmsg::msgtype_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int controlmsg::kTypeFieldNumber;
const int controlmsg::kRingsrcFieldNumber;
const int controlmsg::kRingdstFieldNumber;
const int controlmsg::kRowsFieldNumber;
const int controlmsg::kColsFieldNumber;
const int controlmsg::kInitFieldNumber;
const int controlmsg::kBucketsFieldNumber;
const int controlmsg::kPartialobjFieldNumber;
#endif  // !_MSC_VER

controlmsg::controlmsg()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:stradsccdmf.controlmsg)
}

void controlmsg::InitAsDefaultInstance() {
}

controlmsg::controlmsg(const controlmsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:stradsccdmf.controlmsg)
}

void controlmsg::SharedCtor() {
  _cached_size_ = 0;
  type_ = 5;
  ringsrc_ = 0;
  ringdst_ = 0;
  rows_ = 0;
  cols_ = 0;
  partialobj_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

controlmsg::~controlmsg() {
  // @@protoc_insertion_point(destructor:stradsccdmf.controlmsg)
  SharedDtor();
}

void controlmsg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void controlmsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* controlmsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return controlmsg_descriptor_;
}

const controlmsg& controlmsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ccdmf_2eproto();
  return *default_instance_;
}

controlmsg* controlmsg::default_instance_ = NULL;

controlmsg* controlmsg::New() const {
  return new controlmsg;
}

void controlmsg::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<controlmsg*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 159) {
    ZR_(ringsrc_, rows_);
    ZR_(partialobj_, cols_);
    type_ = 5;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  init_.Clear();
  buckets_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool controlmsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:stradsccdmf.controlmsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .stradsccdmf.controlmsg.msgtype type = 1 [default = UNKNOWN];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::stradsccdmf::controlmsg_msgtype_IsValid(value)) {
            set_type(static_cast< ::stradsccdmf::controlmsg_msgtype >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ringsrc;
        break;
      }

      // optional int32 ringsrc = 2;
      case 2: {
        if (tag == 16) {
         parse_ringsrc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ringsrc_)));
          set_has_ringsrc();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_ringdst;
        break;
      }

      // optional int32 ringdst = 3;
      case 3: {
        if (tag == 24) {
         parse_ringdst:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ringdst_)));
          set_has_ringdst();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_rows;
        break;
      }

      // optional int32 rows = 4;
      case 4: {
        if (tag == 32) {
         parse_rows:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rows_)));
          set_has_rows();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_cols;
        break;
      }

      // optional int32 cols = 5;
      case 5: {
        if (tag == 40) {
         parse_cols:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cols_)));
          set_has_cols();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_init;
        break;
      }

      // repeated .stradsccdmf.initinfo init = 6;
      case 6: {
        if (tag == 50) {
         parse_init:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_init()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_init;
        if (input->ExpectTag(58)) goto parse_buckets;
        break;
      }

      // repeated .stradsccdmf.singlebucket buckets = 7;
      case 7: {
        if (tag == 58) {
         parse_buckets:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_buckets()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_buckets;
        if (input->ExpectTag(65)) goto parse_partialobj;
        break;
      }

      // optional double partialobj = 8;
      case 8: {
        if (tag == 65) {
         parse_partialobj:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &partialobj_)));
          set_has_partialobj();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:stradsccdmf.controlmsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:stradsccdmf.controlmsg)
  return false;
#undef DO_
}

void controlmsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:stradsccdmf.controlmsg)
  // optional .stradsccdmf.controlmsg.msgtype type = 1 [default = UNKNOWN];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional int32 ringsrc = 2;
  if (has_ringsrc()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ringsrc(), output);
  }

  // optional int32 ringdst = 3;
  if (has_ringdst()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->ringdst(), output);
  }

  // optional int32 rows = 4;
  if (has_rows()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->rows(), output);
  }

  // optional int32 cols = 5;
  if (has_cols()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->cols(), output);
  }

  // repeated .stradsccdmf.initinfo init = 6;
  for (int i = 0; i < this->init_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->init(i), output);
  }

  // repeated .stradsccdmf.singlebucket buckets = 7;
  for (int i = 0; i < this->buckets_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->buckets(i), output);
  }

  // optional double partialobj = 8;
  if (has_partialobj()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->partialobj(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:stradsccdmf.controlmsg)
}

::google::protobuf::uint8* controlmsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:stradsccdmf.controlmsg)
  // optional .stradsccdmf.controlmsg.msgtype type = 1 [default = UNKNOWN];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional int32 ringsrc = 2;
  if (has_ringsrc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ringsrc(), target);
  }

  // optional int32 ringdst = 3;
  if (has_ringdst()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->ringdst(), target);
  }

  // optional int32 rows = 4;
  if (has_rows()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->rows(), target);
  }

  // optional int32 cols = 5;
  if (has_cols()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->cols(), target);
  }

  // repeated .stradsccdmf.initinfo init = 6;
  for (int i = 0; i < this->init_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->init(i), target);
  }

  // repeated .stradsccdmf.singlebucket buckets = 7;
  for (int i = 0; i < this->buckets_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->buckets(i), target);
  }

  // optional double partialobj = 8;
  if (has_partialobj()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->partialobj(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:stradsccdmf.controlmsg)
  return target;
}

int controlmsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .stradsccdmf.controlmsg.msgtype type = 1 [default = UNKNOWN];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional int32 ringsrc = 2;
    if (has_ringsrc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ringsrc());
    }

    // optional int32 ringdst = 3;
    if (has_ringdst()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ringdst());
    }

    // optional int32 rows = 4;
    if (has_rows()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rows());
    }

    // optional int32 cols = 5;
    if (has_cols()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cols());
    }

    // optional double partialobj = 8;
    if (has_partialobj()) {
      total_size += 1 + 8;
    }

  }
  // repeated .stradsccdmf.initinfo init = 6;
  total_size += 1 * this->init_size();
  for (int i = 0; i < this->init_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->init(i));
  }

  // repeated .stradsccdmf.singlebucket buckets = 7;
  total_size += 1 * this->buckets_size();
  for (int i = 0; i < this->buckets_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->buckets(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void controlmsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const controlmsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const controlmsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void controlmsg::MergeFrom(const controlmsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  init_.MergeFrom(from.init_);
  buckets_.MergeFrom(from.buckets_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_ringsrc()) {
      set_ringsrc(from.ringsrc());
    }
    if (from.has_ringdst()) {
      set_ringdst(from.ringdst());
    }
    if (from.has_rows()) {
      set_rows(from.rows());
    }
    if (from.has_cols()) {
      set_cols(from.cols());
    }
    if (from.has_partialobj()) {
      set_partialobj(from.partialobj());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void controlmsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void controlmsg::CopyFrom(const controlmsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool controlmsg::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->init())) return false;
  return true;
}

void controlmsg::Swap(controlmsg* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(ringsrc_, other->ringsrc_);
    std::swap(ringdst_, other->ringdst_);
    std::swap(rows_, other->rows_);
    std::swap(cols_, other->cols_);
    init_.Swap(&other->init_);
    buckets_.Swap(&other->buckets_);
    std::swap(partialobj_, other->partialobj_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata controlmsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = controlmsg_descriptor_;
  metadata.reflection = controlmsg_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace stradsccdmf

// @@protoc_insertion_point(global_scope)
